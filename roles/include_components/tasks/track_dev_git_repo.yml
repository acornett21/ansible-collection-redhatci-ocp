---

# extract-dependencies adds the .original-commit-id file to the repo
# before rebasing or merging the branch so we can use it to get
# the real commit SHA.
- name: Retrieve the commit id of the git repo from .original-commit-id or HEAD
  ansible.builtin.shell: cat .original-commit-id || git rev-parse HEAD
  register: _ic_last_commit_id
  args:
    chdir: "{{ item }}"

- name: Get repo url  # noqa: command-instead-of-module
  ansible.builtin.command: git -C {{ item }} config --get remote.origin.url
  register: repo_url
  when: _ic_last_commit_id.rc == 0
  no_log: true

# create the component the same way as in
# dci-ansible/action_plugins/git.py
- name: Create git repo component
  ansible.legacy.dci_component:
    display_name: "{{ repo_url.stdout | basename | regex_replace('[.]git$', '') }} {{ _ic_last_commit_id.stdout[:7] }}"
    version: "{{ _ic_last_commit_id.stdout[:7] }}"
    uid: "{{ _ic_last_commit_id.stdout }}"
    team_id: "{{ job_info['job']['team_id'] }}"
    topic_id: "{{ job_info['job']['topic_id'] }}"
    type: "{{ repo_url.stdout | basename | regex_replace('[.]git$', '') }}"
    url: "{{ repo_url.stdout | regex_replace('^(.*):(.*)@(.*)', 'https://\\3') | regex_replace('^ssh://(.*)@(.*)', 'https://\\2') | regex_replace('[.]git$', '') }}/commit/{{ _ic_last_commit_id.stdout }}"
    state: present
  register: git_component
  when: _ic_last_commit_id.rc == 0

- name: 'Attach git component to the job'
  ansible.legacy.dci_job_component:
    component_id: "{{ git_component.component.id }}"
    job_id: " {{ job_id }} "
  register: job_component_result
  until: job_component_result is not failed
  retries: 5
  delay: 20
  when: _ic_last_commit_id.rc == 0

...
