---
- name: Requirements validation for the mirror catalog role
  ansible.builtin.assert:
    that:
      - mc_registry | default("") | length
      - mc_oc_tool_path is defined
      - mc_catalog is defined
      - mc_catalog | length

- name: Set catalog fact
  ansible.builtin.set_fact:
    mc_catalog_digest: "{{ mc_catalog }}"

- name: Set Digest in catalog
  when: not mc_catalog | regex_search('@sha256sum:')
  block:
    - name: Get catalog Digest
      ansible.builtin.shell:
        cmd: >
          skopeo inspect
          {% if mc_allow_unsecure_registry | bool %}
          --tls-verify=false
          {% endif %}
          {% if mc_pullsecret is defined %}
          --authfile {{ mc_pullsecret }}
          {% endif %}
          docker://{{ mc_catalog }} |
          jq -r '.Digest'
      register: image_digest
      retries: 5
      delay: 5
      until:
        - image_digest.stdout | regex_search('^sha')

    - name: Set catalog with digest
      vars:
        mc_base_catalog: "{{ mc_catalog | regex_search('(^.+):', '\\1') | first }}"
      ansible.builtin.set_fact:
        mc_catalog_digest: "{{ mc_base_catalog }}@{{ image_digest.stdout }}"

- name: Create tmp directory
  ansible.builtin.tempfile:
    state: directory
  register: mc_tmp

- name: Mirror operators
  ansible.builtin.shell:
    cmd: >
      set -x;
      {{ mc_oc_tool_path }} adm catalog mirror
      {{ mc_catalog_digest }}
      {{ mc_registry }}
      --index-filter-by-os="linux/amd64"
      {% if mc_allow_unsecure_registry | bool %}
      --insecure
      {% endif %}
      --max-components={{ mc_max_components | int }}
      --continue-on-error={{ mc_continue_on_error }}
      {% if mc_manifest_only | bool %}
      --manifests-only=true
      {% endif %}
      {% if mc_pullsecret is defined %}
      --registry-config {{ mc_pullsecret }}
      {% endif %}
      --to-manifests={{ mc_tmp.path }}/manifests
  register: catalog_manifests_output
  retries: 3
  delay: 10
  until: catalog_manifests_output.rc == 0

- name: Set the Image Source file
  ansible.builtin.tempfile:
    state: file
    prefix: "imagesource_{{ (mc_catalog_digest | basename).split('@')[0] }}."
  register: mc_is_file

- name: Migrate ICSP to IDMS
  when:
    - mc_is_type | lower == "idms"
  block:
    - name: Transform ICSP to IDMS
      ansible.builtin.command:
        cmd: >
          {{ mc_oc_tool_path }} adm migrate icsp
          {{ mc_tmp.path }}/manifests/imageContentSourcePolicy.yaml
          --dest-dir {{ mc_tmp.path }}
      register: migrate_result

    - name: Set new image source file
      ansible.builtin.set_fact:
        is_manifest_file: "{{ migrate_result.stdout_lines[0].split(' ')[-1] }}"

    - name: Read the image source file
      ansible.builtin.include_vars:
        file: "{{ is_manifest_file }}"
        name: mc_is_content

    - name: Regenerate image source with expected indentation
      ansible.builtin.copy:
        dest: "{{ is_manifest_file }}"
        content: "{{ mc_is_content | to_yaml }}"  # noqa: jinja[invalid]
        mode: "0750"

- name: Copy the generated Image Source file
  ansible.builtin.copy:
    src: "{{ is_manifest_file | default(mc_tmp.path + '/manifests/imageContentSourcePolicy.yaml') }}"
    dest: "{{ mc_is_file.path }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0644"

- name: Delete tmp directory
  ansible.builtin.file:
    path: "{{ mc_tmp.path }}"
    state: absent
  when: mc_tmp is defined
...
