---
- name: "Find any existing OpenShift binaries"
  ansible.builtin.find:
    paths: "{{ ocp_binary_path }}"
    patterns: 'oc,openshift-install,kubectl'
  register: binary_results
  tags:
    - cleanup
    - getoc

- name: "Remove any existing OpenShift binaries"
  ansible.builtin.file:
    path: "{{ item['path'] }}"
    state: absent
  loop: "{{ binary_results['files'] }}"
  loop_control:
    label: "{{ item['path'] }}"
  become: true
  tags:
    - cleanup
    - getoc

- name: "Validate that master cache directory exists"
  ansible.builtin.stat:
    path: "{{ si_cache_dir }}"
    get_checksum: false
  register: cachedir
  delegate_to: "{{ si_cache_server }}"
  tags:
    - getoc
    - cache

- name: "Create master cache directory"
  ansible.builtin.file:
    path: "{{ si_cache_dir }}"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0755"
  become: true
  delegate_to: "{{ si_cache_server }}"
  when:
    - not cachedir.stat.exists | bool
  tags:
    - getoc
    - cache

- name: "Validate if cache dir for release exists"
  ansible.builtin.stat:
    path: "{{ si_cache_dir }}/{{ version }}"
    get_checksum: false
  register: cachedir_rel
  delegate_to: "{{ si_cache_server }}"
  tags:
    - getoc
    - cache

- name: "Create cache directory for release"
  ansible.builtin.file:
    path: "{{ si_cache_dir }}/{{ version }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0755"
    state: directory
  become: true
  delegate_to: "{{ si_cache_server }}"
  when:
    - not cachedir_rel.stat.exists | bool
  tags:
    - getoc
    - cache

- name: "Check if release.txt exists"
  ansible.builtin.stat:
    path: "{{ si_cache_dir }}/{{ version }}/release.txt"
    get_checksum: false
  register: release_txt
  delegate_to: "{{ si_cache_server }}"
  tags:
    - getoc
    - cache

- name: "Create tmp directory for stable client"
  ansible.builtin.tempfile:
    state: directory
    prefix: sno_oc.
  register: sno_tmp_dir
  delegate_to: "{{ si_cache_server }}"
  tags:
    - getoc
    - cache

- name: "Download stable client"
  vars:
    ocp_stable_url: https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp
  ansible.builtin.unarchive:
    src: "{{ ocp_stable_url }}/stable/openshift-client-linux-amd64-rhel{{ si_cache_server_major_version }}.tar.gz"
    dest: "{{ sno_tmp_dir.path }}"
    remote_src: true
    mode: "0755"
  register: result
  retries: 3
  delay: 10
  until: result is not failed
  delegate_to: "{{ si_cache_server }}"
  tags:
    - getoc
    - cache

- name: "Extract artifacts from release image"
  ansible.builtin.command:
    cmd: >
      {{ sno_tmp_dir.path }}/oc adm release extract
      --registry-config {{ pullsecret_file }}
      --tools
      --from {{ pull_url }}
      --to "{{ si_cache_dir }}/{{ version }}"
  delegate_to: "{{ si_cache_server }}"
  tags:
    - getoc
    - cache

- name: "Remove temporary oc client"
  ansible.builtin.file:
    path: "{{ sno_tmp_dir.path }}"
    state: absent
  delegate_to: "{{ si_cache_server }}"
  tags:
    - getoc
    - cache

- name: "Set fact oc installer prefix"
  ansible.builtin.set_fact:
    sno_installer_oc_installer_prefix: >-
      {{ (version is ansible.builtin.version('4.16.0', '>=') and
          ansible_facts['os_family'] == 'RedHat' and
          ansible_facts['distribution_major_version'] == '8') |
          ternary('openshift-client-linux-amd64-rhel8', 'openshift-client-linux') }}
  tags:
    - getoc
    - cache

- name: "Check if clients exists"
  ansible.builtin.stat:
    path: "{{ si_cache_dir }}/{{ version }}/client_tools.done"
    get_checksum: false
  register: client_tools_done
  delegate_to: "{{ si_cache_server }}"
  tags:
    - getoc
    - cache

- name: "Unarchive client tarball"
  ansible.builtin.unarchive:
    src: "{{ si_cache_dir }}/{{ version }}/{{ sno_installer_oc_installer_prefix }}-{{ version }}.tar.gz"
    dest: "{{ si_cache_dir }}/{{ version }}"
    owner: "{{ si_cache_server_user_id }}"
    group: "{{ si_cache_server_user_gid }}"
    mode: "0755"
    remote_src: true
    exclude:
      - README.md
  register: result
  retries: 3
  delay: 10
  until: result is not failed
  delegate_to: "{{ si_cache_server }}"
  when:
    - not client_tools_done.stat.exists or force_mirroring
  tags:
    - getoc
    - cache

# If the registry host got the oc tools, lets just copy it to the prov host
- name: "Copy the openshift client tools from control machine to the provisioner host"
  when:
    - si_cache_server != groups['provisioner'][0]
  tags:
    - getoc
    - cache
  block:
    - name: "Check that the provision host cluster configs directory exists"
      ansible.builtin.file:
        path: "{{ dir }}"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: "0755"

    - name: "Get the openshift client tools from registry host into temp file on control machine"
      ansible.builtin.fetch:
        dest: "{{ _si_tmp_dir.path }}/"
        flat: true
        src: "{{ si_cache_dir }}/{{ version }}/{{ item }}"
      loop:
        - kubectl
        - oc
      delegate_to: "{{ si_cache_server }}"

    - name: "Copy the openshift client tools from control machine to the provisioner host"
      ansible.builtin.copy:
        src: "{{ _si_tmp_dir.path }}/{{ item }}"
        dest: "{{ dir }}/{{ item }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: "0755"
      loop:
        - kubectl
        - oc
      become: true

    - name: "Copy oc and kubectl binaries to binary path on provisioner"
      ansible.builtin.copy:
        src: "{{ dir }}/{{ item }}"
        dest: "{{ ocp_binary_path }}/{{ item }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: "0755"
        remote_src: true
      become: true
      loop:
        - kubectl
        - oc

# if provisioner node hosts the cache directory then copy locally
- name: "Copy oc and kubectl binaries to binary and config path"
  vars:
    files:
      - kubectl
      - oc
    dest:
      - "{{ ocp_binary_path }}"
      - "{{ dir }}"
  ansible.builtin.copy:
    src: "{{ si_cache_dir }}/{{ version }}/{{ item[0] }}"
    dest: "{{ item[1] }}/{{ item[0] }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0755"
    remote_src: true
  become: true
  loop: "{{ files | product(dest) | list }}"
  when:
    - si_cache_server == groups['provisioner'][0]
  tags:
    - getoc
    - cache

- name: "Marker for client tools downloaded"
  ansible.builtin.file:
    dest: "{{ si_cache_dir }}/{{ version }}/client_tools.done"
    state: touch
    mode: "0644"
  delegate_to: "{{ si_cache_server }}"
  when:
    - not client_tools_done.stat.exists or force_mirroring
  tags:
    - getoc
    - cache
...
