---
# If we're executing these plays, then:
# 1. cache_enabled is true
# 2. Access to www.redhat.com has been confirmed

# SELinux when already has httpd_sys_content_t giving issues changing,thus
# leaving it the same for the si_cache_dir to prevent issues. Also
# removing ":z" from podman_container for si_cache_dir in the later
# task.
- name: "Create provision cache store on host with online access"
  ansible.builtin.file:
    path: "{{ item[0] }}"
    state: directory
    owner: "{{ si_cache_server_user_id }}"
    group: "{{ si_cache_server_user_gid }}"
    setype: "{{ item[1] }}"
    mode: '755'
  with_nested:
    - ["{{ si_cache_dir }}"]
    - ['httpd_sys_content_t']
  tags: cache

- name: "Get status of the RHCOS image cache container"
  containers.podman.podman_container:
    name: sno_image_cache
    image: "{{ webserver_caching_image }}"
    state: started
    publish:
      - "{{ webserver_caching_port_container }}:8080"
    volumes:
      - "{{ si_cache_dir }}:/var/www/html"
  check_mode: true
  register: _si_image_cache_status

# Leaving SELinux details alone and not using ":z"
# for the si_cache_dir due to issues attempting
# to revert context. Leaving behavior as it was previously
# to avoid breaking other user environments.
- name: "Create RHCOS image cache container"
  containers.podman.podman_container:
    name: sno_image_cache
    image: "{{ webserver_caching_image }}"
    state: stopped
    publish:
      - "{{ webserver_caching_port_container }}:8080"
    volumes:
      - "{{ si_cache_dir }}:/var/www/html"
  register: _si_image_cache
  when:
    - _si_image_cache_status.changed # noqa: no-handler
  tags: cache

- name: "Setting facts about container"
  ansible.builtin.set_fact:
    rhcos_image_cache_name: "{{ _si_container.Name }}"
    rhcos_image_cache_pidfile: "{{ _si_container.ConmonPidFile }}"
  vars:
    _si_container: "{{ _si_image_cache_status.changed | ternary(_si_image_cache.container, _si_image_cache_status.container) }}"
  tags: cache

- name: "Ensuring container restarts upon reboot"
  tags: cache
  block:
    - name: "Ensure user specific systemd instance are persistent"
      ansible.builtin.command: |
        /usr/bin/loginctl enable-linger {{ si_cache_server_user_id }}

    - name: "Create systemd user directory"
      ansible.builtin.file:
        path: "{{ si_cache_server_user_dir }}/.config/systemd/user"
        state: directory
        owner: "{{ si_cache_server_user_id }}"
        group: "{{ si_cache_server_user_gid }}"
        mode: '0775'

    - name: "Copy the systemd service file"
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=Podman container-cache.service
          [Service]
          Restart=on-failure
          ExecStart=/usr/bin/podman start {{ rhcos_image_cache_name }}
          ExecStop=/usr/bin/podman stop -t 10 {{ rhcos_image_cache_name }}
          KillMode=none
          Type=forking
          PIDFile={{ rhcos_image_cache_pidfile }}
          [Install]
          WantedBy=default.target
        dest: "{{ si_cache_server_user_dir }}/.config/systemd/user/container-cache.service"
        owner: "{{ si_cache_server_user_id }}"
        group: "{{ si_cache_server_user_gid }}"
        mode: '0644'
      register: _si_service_unit

    - name: "Reload systemd service"
      ansible.builtin.systemd:
        daemon_reexec: true
        scope: user
      environment:
        DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS | default('unix:path=/run/user/' + ansible_effective_user_id | string + '/bus') }}"

    - name: "Enable container-cache.service"
      ansible.builtin.systemd:
        name: container-cache.service
        enabled: true
        scope: user
      environment:
        DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS | default('unix:path=/run/user/' + ansible_effective_user_id | string + '/bus') }}"

    - name: "Get status of the image cache service"
      ansible.builtin.systemd:
        name: container-cache.service
        state: started
        scope: user
      environment:
        DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS | default('unix:path=/run/user/' + ansible_effective_user_id | string + '/bus') }}"
      check_mode: true
      register: _si_cache_service_status

    - name: "Start container-cache.service"
      ansible.builtin.systemd:
        name: container-cache.service
        state: restarted
        scope: user
      environment:
        DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS | default('unix:path=/run/user/' + ansible_effective_user_id | string + '/bus') }}"
      # Silenced ansible-lint rule "no-handler" since handlers would be run at
      # the end of the playbook, but this task may be needed afterwards in the\
      # same playbook.
      when: _si_image_cache_status.changed or _si_service_unit.changed or _si_cache_service_status.changed # noqa: no-handler

    - name: "Allow HTTP cache traffic"
      ansible.posix.firewalld:
        port: "{{ webserver_caching_port_container }}/tcp"
        permanent: true
        immediate: true
        state: enabled
      become: true
      when: firewall == "firewalld"
...
