---
- name: Create working directory
  ansible.builtin.tempfile:
    state: directory
    prefix: hcp_tmp
  register: ah_tmp_dir

- name: Set work directory path
  ansible.builtin.set_fact:
    ah_tmp_dir: "{{ ah_tmp_dir.path }}"

- name: Download CLIs
  ansible.builtin.include_tasks: download-cli.yml
  when:
    - ah_download_cli | bool

- name: Assert ah_hcp_cli_path is defined and not empty
  ansible.builtin.assert:
    that:
      - ah_hcp_cli_path is defined
      - ah_hcp_cli_path | length > 0
    fail_msg: "The variable ah_hcp_cli_path is either not defined or is empty"

- name: Assert ah_oc_cli_path is defined and not empty
  ansible.builtin.assert:
    that:
      - ah_oc_cli_path is defined
      - ah_oc_cli_path | length > 0
    fail_msg: "The variable ah_oc_cli_path is either not defined or is empty"

- name: Restart HCP pods to pick latest Management cluster state
  ansible.builtin.include_tasks: restart-cpo.yml

- name: Get Management ICSP
  kubernetes.core.k8s_info:
    api_version: operator.openshift.io/v1alpha1
    kind: ImageContentSourcePolicy
  register: mc_icsp

- name: "Migrate ICSP to IDMS"
  ansible.builtin.shell:
    chdir: "{{ ah_tmp_dir }}"
    cmd: >
      set -x -o pipefail;
      mkdir -p idms icsp;
      for f in $({{ ah_oc_cli_path }} get imageContentSourcePolicy -o name); do
        {{ ah_oc_cli_path }} get ${f} -o yaml > icsp/$(basename ${f}).yaml;
      done;
      for f in icsp/*.yaml; do
        {{ ah_oc_cli_path }} adm migrate icsp ${f} --dest-dir idms;
      done;
      for f in idms/*.yaml; do
        sed -i '/creationTimestamp\|generation\|resourceVersion\|uid\|annotations\|last-applied-configuration/d' "${f}";
      done;
      {{ ah_oc_cli_path }} apply --force --overwrite=true -f idms
  register: migration_result
  changed_when: migration_result.rc != 0
  when:
    - mc_icsp is defined
    - mc_icsp.resources | length > 0

- name: Get management cluster facts
  ansible.builtin.include_tasks: get-mc-facts.yml

- name: "Validate the target release image"
  ansible.builtin.assert:
    that:
      - ah_release_image is defined

- name: Extract target version
  ansible.builtin.shell:
    chdir: "{{ ah_tmp_dir }}"
    cmd: >
      set -x -o pipefail;
      oc adm release info
      {{ ah_release_image }}
      {%- if ah_allow_insecure_registry | bool %}
      --insecure
      {%- endif %}
      --output json
      --registry-config={{ ah_pullsecret_file }} |
      jq -r .metadata.version
  retries: 3
  delay: 10
  register: ah_ocp_version
  changed_when: ah_ocp_version.rc != 0
  until: ah_ocp_version.rc == 0

- name: Set OCP release version
  ansible.builtin.set_fact:
    ah_ocp_version: "{{ ah_ocp_version.stdout }}"

- name: Set cluster name
  ansible.builtin.set_fact:
    ah_cluster_generated_name: "{{ ah_cluster_name | default(lookup('password', '/dev/null length=10 chars=ascii_lowercase,digits'), true) }}"
  run_once: true

- name: Set disconnected facts for Kubevirt disconnected
  ansible.builtin.include_tasks: kvirt-disconnected.yml
  when:
    - ah_disconnected | bool
    - ah_cluster_type == "kubevirt"

- name: "Set Hosted Cluster annotations"
  ansible.builtin.set_fact:
    ah_hc_annotations: "{{ cpo_annotation }}{{ ah_hc_annotations }}"

- name: Hypershift validations
  ansible.builtin.include_tasks: validations.yml

- name: Delete existent cluster
  ansible.builtin.include_tasks: delete-cluster.yml
  when:
    - ah_force_deploy | bool

- name: Hypershift cluster creation
  ansible.builtin.include_tasks: create-cluster.yml
...
