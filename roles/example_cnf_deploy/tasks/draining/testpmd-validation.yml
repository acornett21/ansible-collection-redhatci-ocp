---

- name: "Wait until testpmd-app pod is deleted from the drained node"
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ ecd_cnf_namespace }}"
    name: "{{ ecd_cnf_existing_pod }}"
  register: _ecd_cnf_pod
  until: _ecd_cnf_pod.resources|length == 0
  retries: 24
  delay: 5

- name: "Get timestamp to save the time when testpmd-app was removed"
  ansible.builtin.shell: |
    /usr/bin/date +%s
  register: _ecd_timestamp_pod_deletion

- name: "Wait until new testpmd-app pod is allocated in a new worker node"
  kubernetes.core.k8s_info:
    namespace: "{{ ecd_cnf_namespace }}"
    kind: Pod
    label_selectors:
      - example-cnf-type=cnf-app
  register: _ecd_cnf_pod
  vars:
    ecd_container_state_running_query: "resources[0].status.containerStatuses[?name=='testpmd'].state.running"
    ecd_container_started_query: "resources[0].status.containerStatuses[?name=='testpmd'].started"
    ecd_container_ready_query: "resources[0].status.containerStatuses[?name=='testpmd'].ready"
    ecd_container_state_running: "{{ _ecd_cnf_pod | json_query(ecd_container_state_running_query) }}"
    ecd_container_started: "{{ _ecd_cnf_pod | json_query(ecd_container_started_query) }}"
    ecd_container_ready: "{{ _ecd_cnf_pod | json_query(ecd_container_ready_query) }}"
  retries: 12
  delay: 10
  until:
    - _ecd_cnf_pod.resources[0].status.phase == 'Running'
    - ecd_container_state_running | length > 0
    - ecd_container_started | length > 0
    - ecd_container_started[0] | bool
    - ecd_container_ready | length > 0
    - ecd_container_ready[0] | bool

- name: "Get timestamp to save the time when testpmd-app was recreated"
  ansible.builtin.shell: |
    /usr/bin/date +%s
  register: _ecd_timestamp_pod_recreation

- name: "Retrieve context information from new testpmd pod"
  ansible.builtin.set_fact:
    ecd_cnf_new_node: "{{ _ecd_cnf_pod.resources[0].spec.nodeName }}"
    ecd_cnf_new_pod: "{{ _ecd_cnf_pod.resources[0].metadata.name }}"

- name: "Confirm that a new testpmd-app pod has been created, and in a different worker node"
  ansible.builtin.assert:
    that:
      - ecd_cnf_new_node != ecd_cnf_existing_node
      - ecd_cnf_new_node != ecd_pktgen_existing_node
      - ecd_cnf_new_pod != ecd_cnf_existing_pod
    fail_msg: "New testpmd-app pod does not match the conditions defined to consider it is a new one"

- name: "Uncordon the node after finishing the draining and rescheduling process"
  ansible.builtin.shell: |
    {{ oc_tool_path }} adm uncordon {{ ecd_cnf_existing_node }}
