---
# NetworkAttachmentDefintions should be created on the namespace, it
# will be created by sriov operator, when SriovNetwork resource is created
- name: "Check for net-attach-def presence in the namespace"
  kubernetes.core.k8s_info:
    api_version: k8s.cni.cncf.io/v1
    kind: NetworkAttachmentDefinition
    namespace: "{{ ecd_cnf_namespace }}"
  register: _ecd_net_list
  until: _ecd_net_list.resources | length > 0
  retries: 9
  delay: 10

- name: "Get the clusterversion info"
  kubernetes.core.k8s_info:
    kind: ClusterVersion
  register: _ecd_cluster_version

- name: "Fail ClusterVersion when is not available"
  ansible.builtin.fail:
    msg: "ClusterVersion object version is not available"
  when: _ecd_cluster_version.resources[0].spec.channel|length == 0

- name: "Get all nodes"
  kubernetes.core.k8s_info:
    kind: Node
  register: _ecd_nodes
  no_log: true

- name: "Fail when the minimum workers are not met"
  ansible.builtin.fail:
    msg: "Minimum 2 worker nodes are required to run example-cnf applications"
  when: "_ecd_nodes.resources|length < 2"

- name: "Fail when SRIOV networks info is not available"
  ansible.builtin.fail:
    msg: "'ecd_sriov_networks' is required"
  when:
    - "ecd_sriov_networks|length == 0"

- name: "Apply network configuration (if provided)"
  ansible.builtin.include_tasks: deploy/net-config.yml
  when: ecd_network_config_file|length > 0

- name: "Create network list for CNFApp"
  ansible.builtin.set_fact:
    ecd_networks_cnfapp: "{{ ecd_networks_cnfapp + [item | combine({'mac': ecd_cnfapp_mac_list[idx:idx+item.count], 'ip': ecd_cnfapp_ip_list[idx:idx+item.count]})] }}"
  loop: "{{ ecd_sriov_networks }}"
  loop_control:
    index_var: idx

- name: "Create CR for CNF application"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', ecd_cnfapp_name + '-cr.yaml.j2') }}"

- name: "Check CNFApp pod count to be greater than 0"
  kubernetes.core.k8s_info:
    namespace: "{{ ecd_cnf_namespace }}"
    kind: Pod
    label_selectors:
      - example-cnf-type=cnf-app
  register: _ecd_cnfapp_pods
  retries: 60
  delay: 5
  until:
    - _ecd_cnfapp_pods.resources|length > 0

# At least confirm that the first CNFApp pod is up and running, if using more than one
- name: "Check CNFApp pod status to be running"
  kubernetes.core.k8s_info:
    namespace: "{{ ecd_cnf_namespace }}"
    kind: Pod
    label_selectors:
      - example-cnf-type=cnf-app
  register: _ecd_cnfapp_pods
  vars:
    ecd_container_state_running_query: "resources[0].status.containerStatuses[?name=='{{ ecd_cnfapp_name }}'].state.running"
    ecd_container_started_query: "resources[0].status.containerStatuses[?name=='{{ ecd_cnfapp_name }}'].started"
    ecd_container_ready_query: "resources[0].status.containerStatuses[?name=='{{ ecd_cnfapp_name }}'].ready"
    ecd_container_state_running: "{{ _ecd_cnfapp_pods | json_query(ecd_container_state_running_query) }}"
    ecd_container_started: "{{ _ecd_cnfapp_pods | json_query(ecd_container_started_query) }}"
    ecd_container_ready: "{{ _ecd_cnfapp_pods | json_query(ecd_container_ready_query) }}"
  retries: 60
  delay: 5
  until:
    - _ecd_cnfapp_pods.resources[0].status.phase == 'Running'
    - ecd_container_state_running | length > 0
    - ecd_container_started | length > 0
    - ecd_container_started[0] | bool
    - ecd_container_ready | length > 0
    - ecd_container_ready[0] | bool

- name: "Check CNFAppMac resource count to be greater than 0"
  kubernetes.core.k8s_info:
    namespace: "{{ ecd_cnf_namespace }}"
    kind: CNFAppMac
  register: _ecd_cnfappmac
  retries: 120
  delay: 5
  until:
    - _ecd_cnfappmac.resources is defined
    - _ecd_cnfappmac.resources|length > 0

# CNFAppMac and CNFApp pods share the same name, so we can use it for doing
# some extra checks
- name: "Check that at least the cnfappmac resource for the first CNFApp pod has the required data"
  kubernetes.core.k8s_info:
    namespace: "{{ ecd_cnf_namespace }}"
    kind: CNFAppMac
    name: "{{ _ecd_cnfapp_pods.resources[0].metadata.name }}"
  register: _ecd_first_cnfappmac
  retries: 120
  delay: 5
  until:
    - _ecd_first_cnfappmac.resources is defined
    - _ecd_first_cnfappmac.resources|length > 0
    - _ecd_first_cnfappmac.resources[0].spec.resources is defined
    - _ecd_first_cnfappmac.resources[0].spec.resources|length > 0

# Do not launch any TRexApp resource if ecd_run_deployment is different than 1
# In that case, we need to skip failures when checking TRex test result to make the automation work
- name: Do not enable TRexApp if no automated deployment is launched
  ansible.builtin.set_fact:
    ecd_enable_trex_app: false
    ecd_trex_tests_skip_failures: true
  when: ecd_run_deployment != 1

- name: "TRex CR block"
  ansible.builtin.include_tasks: trex/retry-trex.yml
  when: ecd_enable_trex|bool

# We need to check ecd_trex_continuous_mode here to avoid running extra tests, where we would have two or
# more possible TRex jobs that are running in continuous burst mode.
- name: "TRex additional tests"
  ansible.builtin.include_tasks: trex/tests.yml
  when:
    - ecd_enable_trex_app|bool
    - ecd_trex_test_config|length > 0
    - not ecd_trex_continuous_mode|bool
